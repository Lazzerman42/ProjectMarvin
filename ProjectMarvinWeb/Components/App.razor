<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<base href="/" />
  
* <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
  <link rel="stylesheet" href="app.css" />
  <link rel="stylesheet" href="ProjectMarvin.styles.css" />
  <link rel="icon" type="image/png" href="favicon.png" />

	<HeadOutlet @rendermode="RenderModeForPage" />

</head>

<body>
	<Routes @rendermode="RenderModeForPage" />
	<script autostart="false" src="_framework/blazor.web.js"></script>
  <script>
    Blazor.start({
      reconnectionHandler: {
        onConnectionDown: (options, error) => document.location.reload(),
        onConnectionUp: () => console.log("Up, up, and away!")
      }
    });
    // Wait until a reload button appears
    new MutationObserver((mutations, observer) => {
      if (document.querySelector('#components-reconnect-modal h5 a')) {
        // Now every 0.5 seconds, see if the server appears to be back, and if so, reload
        async function attemptReload() {
          await fetch(''); // Check the server really is back
          location.reload();
        }
        observer.disconnect();
        attemptReload();
        setInterval(attemptReload, 500);
      }
    }).observe(document.body, { childList: true, subtree: true });
  </script>

</body>

</html>

@code {
	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
			? null
			: InteractiveServer;
}
